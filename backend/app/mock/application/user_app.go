// Code generated by MockGen. DO NOT EDIT.
// Source: app/application/user_app.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	params "github.com/jumpei00/board/backend/app/application/params"
	domain "github.com/jumpei00/board/backend/app/domain"
)

// MockUserApplication is a mock of UserApplication interface.
type MockUserApplication struct {
	ctrl     *gomock.Controller
	recorder *MockUserApplicationMockRecorder
}

// MockUserApplicationMockRecorder is the mock recorder for MockUserApplication.
type MockUserApplicationMockRecorder struct {
	mock *MockUserApplication
}

// NewMockUserApplication creates a new mock instance.
func NewMockUserApplication(ctrl *gomock.Controller) *MockUserApplication {
	mock := &MockUserApplication{ctrl: ctrl}
	mock.recorder = &MockUserApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApplication) EXPECT() *MockUserApplicationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserApplication) CreateUser(param *params.UserSignUpApplicationLayerParam) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", param)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserApplicationMockRecorder) CreateUser(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserApplication)(nil).CreateUser), param)
}

// GetUserByID mocks base method.
func (m *MockUserApplication) GetUserByID(id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserApplicationMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserApplication)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockUserApplication) GetUserByUsername(key string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", key)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserApplicationMockRecorder) GetUserByUsername(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserApplication)(nil).GetUserByUsername), key)
}

// ValidateUser mocks base method.
func (m *MockUserApplication) ValidateUser(param *params.UserSignInApplicationLayerParam) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", param)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockUserApplicationMockRecorder) ValidateUser(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockUserApplication)(nil).ValidateUser), param)
}
