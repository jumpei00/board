// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/comment_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/jumpei00/board/backend/app/domain"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCommentRepository) Delete(comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryMockRecorder) Delete(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepository)(nil).Delete), comment)
}

// GetAllByKey mocks base method.
func (m *MockCommentRepository) GetAllByKey(threadKey string) (*[]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByKey", threadKey)
	ret0, _ := ret[0].(*[]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByKey indicates an expected call of GetAllByKey.
func (mr *MockCommentRepositoryMockRecorder) GetAllByKey(threadKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByKey", reflect.TypeOf((*MockCommentRepository)(nil).GetAllByKey), threadKey)
}

// GetByKey mocks base method.
func (m *MockCommentRepository) GetByKey(commentKey string) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", commentKey)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockCommentRepositoryMockRecorder) GetByKey(commentKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockCommentRepository)(nil).GetByKey), commentKey)
}

// Insert mocks base method.
func (m *MockCommentRepository) Insert(comment *domain.Comment) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", comment)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCommentRepositoryMockRecorder) Insert(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCommentRepository)(nil).Insert), comment)
}

// Update mocks base method.
func (m *MockCommentRepository) Update(comment *domain.Comment) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", comment)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentRepositoryMockRecorder) Update(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentRepository)(nil).Update), comment)
}
