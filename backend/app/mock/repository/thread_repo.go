// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/thread_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/jumpei00/board/backend/app/domain"
)

// MockThreadRepository is a mock of ThreadRepository interface.
type MockThreadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThreadRepositoryMockRecorder
}

// MockThreadRepositoryMockRecorder is the mock recorder for MockThreadRepository.
type MockThreadRepositoryMockRecorder struct {
	mock *MockThreadRepository
}

// NewMockThreadRepository creates a new mock instance.
func NewMockThreadRepository(ctrl *gomock.Controller) *MockThreadRepository {
	mock := &MockThreadRepository{ctrl: ctrl}
	mock.recorder = &MockThreadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreadRepository) EXPECT() *MockThreadRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockThreadRepository) Delete(thread *domain.Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", thread)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockThreadRepositoryMockRecorder) Delete(thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockThreadRepository)(nil).Delete), thread)
}

// DeleteThreadAndComments mocks base method.
func (m *MockThreadRepository) DeleteThreadAndComments(thread *domain.Thread, comments *[]domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThreadAndComments", thread, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThreadAndComments indicates an expected call of DeleteThreadAndComments.
func (mr *MockThreadRepositoryMockRecorder) DeleteThreadAndComments(thread, comments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThreadAndComments", reflect.TypeOf((*MockThreadRepository)(nil).DeleteThreadAndComments), thread, comments)
}

// GetAll mocks base method.
func (m *MockThreadRepository) GetAll() (*[]domain.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]domain.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockThreadRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockThreadRepository)(nil).GetAll))
}

// GetByKey mocks base method.
func (m *MockThreadRepository) GetByKey(threadKey string) (*domain.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", threadKey)
	ret0, _ := ret[0].(*domain.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockThreadRepositoryMockRecorder) GetByKey(threadKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockThreadRepository)(nil).GetByKey), threadKey)
}

// Insert mocks base method.
func (m *MockThreadRepository) Insert(thread *domain.Thread) (*domain.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", thread)
	ret0, _ := ret[0].(*domain.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockThreadRepositoryMockRecorder) Insert(thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockThreadRepository)(nil).Insert), thread)
}

// Update mocks base method.
func (m *MockThreadRepository) Update(thread *domain.Thread) (*domain.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", thread)
	ret0, _ := ret[0].(*domain.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockThreadRepositoryMockRecorder) Update(thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThreadRepository)(nil).Update), thread)
}
